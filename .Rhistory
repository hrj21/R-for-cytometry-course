gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(1, 3.5), min = c(-1, 3), max = c(2, 4))
})
gs_pop_add(gs, cd8_auto, parent = "CD3", name = "CD8")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD8", bins = 200)
gs_pop_remove(gs, "CD8")
cd8_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(1, 3.5))
})
gs_pop_add(gs, cd8_auto, parent = "CD3", name = "CD8")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD8", bins = 200)
gs_pop_remove(gs, "CD8")
cd8_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(1, 3.5), min = c(-1, 2.5))
})
gs_pop_add(gs, cd8_auto, parent = "CD3", name = "CD8")
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD8", bins = 200)
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD8", bins = 200)
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), min = c(2, -1), quantile = 0.9)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), min = c(2, -2), quantile = 0.9)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), min = c(2, -Inf), quantile = 0.9)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), min = c(2, -Inf), quantile = 1.0)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), min = c(2, -Inf), quantile = 0.99)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), min = c(2, -1), quantile = 0.95)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), K = 4)
})
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), K = 4)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), K = 4, quantile = 0.95)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), K = 5, quantile = 0.95)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), K = 6, quantile = 0.95)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0), max = c(4, 2))
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
?gate_flowclust_2d
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0),
min = c(2, -Inf),
max = c(4, 2),
quantile = 0.95)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0),
min = c(2, -Inf),
max = c(4, 1.5),
quantile = 0.95)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x,
xChannel = "FITC-A",
yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 1.0),
min = c(2, -Inf),
max = c(4, 1.5),
quantile = 0.99)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
plot(gs)
?gate_quad_sequential
devtools::install_github("DillonHammill/CytoExploreR")######
remotes::install_github("RGLab/cytoinstaller")
withr::with_envvar(c(R_REMOTES_NO_ERRORS_FROM_WARNINGS="true"),
remotes::install_github("RGLab/cytoinstaller")
)
devtools::install_github("DillonHammill/CytoExploreR")######
devtools::install_github("DillonHammill/CytoExploreR")######
devtools::install_github("DillonHammill/CytoExploreR")######
devtools::install_github("DillonHammill/CytoExploreR")######
gs_pop_remove(gs, "CD4")
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5), max = c(4, 2))
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
gs_pop_remove(gs, "CD4")
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
K = 4)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
K = 3)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
K = 3,
quantile = 0.95)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
K = 3,
quantile = 0.99)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
K = 3,
quantile = 0.975)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
#K = 3,
quantile = 0.975)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
gs_pop_remove(gs, "CD4")
autoplot(gs[[1]])
gs <- GatingSet(trans_fs) # gating set is the holding area for all the gates
# Scatter gate ------------------------------------------------------------
rect <- rectangleGate("FSC-A" = c(5e4, 1.2e5), "SSC-A" = c(0, 8e4), filterId = "Scatter")
rect
gs_pop_add(gs, rect, parent = "root")
gs_get_pop_paths(gs)
recompute(gs) # assign each event to the gating set
# Singlet gate ------------------------------------------------------------
scatter_fs <- gs_pop_get_data(gs, "Scatter")
poly_coords <- matrix(c(4e4, 1.2e5, 1e5, 3e4, 2.5e4, 9e4, 1.2e5, 5e4), ncol = 2)
colnames(poly_coords) <- c("FSC-A", "FSC-H")
poly <- polygonGate(poly_coords, filterId = "Singlets")
gs_pop_add(gs, poly, parent = "Scatter")
gs_get_pop_paths(gs)
recompute(gs)
# Lymphocyte gate ---------------------------------------------------------
singlet_fs <- gs_pop_get_data(gs, "Singlets")
cov_mat <- matrix(c(0.5, 0, 0, 0.5), ncol = 2,
dimnames = list(c("APC-Cy7-A", "PE-Cy7-A"),
c("APC-Cy7-A", "PE-Cy7-A")))
cov_mat
means <- c("APC-Cy7-A" = 3.5, "PE-Cy7-A" = 3.8)
ellipse <- ellipsoidGate(cov_mat, mean = means, filterId = "CD3")
gs_pop_add(gs, ellipse, parent = "Singlets")
gs_get_pop_paths(gs)
# CD4 and CD8 gates -------------------------------------------------------
cd3_fs <- gs_pop_get_data(gs, "CD3")
## CD8
cd8_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x,
xChannel = "FITC-A",
yChannel = "PerCP-Cy5-5-A",
target = c(1, 3.5),
min = c(-1, 2.5),
quantile = 0.9)
})
gs_pop_add(gs, cd8_auto, parent = "CD3", name = "CD8")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD8", bins = 200)
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
K = 3,
quantile = 0.975)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD4", bins = 200)
autoplot(gs[[1]], bins = 200)
# Get population statistics -----------------------------------------------
gs_pop_get_stats(gs, type = "count")
gs_pop_get_stats(gs, type = "percent")
gs_pop_get_stats(gs, type = pop.MFI)
gs_pop_get_stats(gs, nodes = "CD4", type = pop.MFI)
gs[[1]]
gs[[1]]@pointer
gs[[1]]@transformation
str(gs[[1]])
?autoplot
names(gs[[1]])
names(gs)
gs
lapply(1:4, function(x) {
autoplot(gs[[x]], bins = 200)
ggsave(paste0("plots/", x, "_gating.png", width = 5, height = 15))
})
lapply(1:4, function(x) {
autoplot(gs[[x]], bins = 200)
ggsave(paste0("plots/", x, "_gating.pdf", width = 5, height = 15))
})
lapply(1:4, function(x) {
autoplot(gs[[x]], bins = 200)
ggsave(paste0("plots/", x, "_gating.png"), width = 5, height = 15)
})
autoplot(gs[[1]], bins = 200)
lapply(1:4, function(x) {
png(paste0("plots/", x, "_gating.png"))
autoplot(gs[[x]], bins = 200)
dev.off()
})
dev.off()
dev.off()
lapply(1:4, function(x) {
png(paste0("plots/", x, "_gating.png"))
autoplot(gs[[x]], bins = 200)
dev.off()
})
png("plots/test.png")
autoplot(gs[[1]], bins = 200)
dev.off()
purrr::walk(1:4, function(x) {
png(paste0("plots/", x, "_gating.png"))
autoplot(gs[[x]], bins = 200)
dev.off()
})
lapply(1:4, function(x) {
png(paste0("plots/", x, "_gating.png"))
autoplot(gs[[x]], bins = 200)
dev.off()
})
lapply(1:4, function(x) {
#png(paste0("plots/", x, "_gating.png"))
autoplot(gs[[x]], bins = 200)
#dev.off()
})
lapply(1:4, function(x) {
png(paste0("plots/", x, "_gating.png"))
print(autoplot(gs[[x]], bins = 200))
dev.off()
})
?gs_pop_get_stats()
# Get population statistics -----------------------------------------------
gs_pop_get_stats(gs, type = "count")
gs_pop_get_stats(gs, type = "percent")
gs_pop_get_stats(gs, type = pop.MFI)
gs_pop_get_stats(gs, type = "all")
pop_stats$percent <- gs_pop_get_stats(gs, type = "percent")$percent
# Get population statistics -----------------------------------------------
pop_stats <- gs_pop_get_stats(gs, type = "count")
pop_stats$percent <- gs_pop_get_stats(gs, type = "percent")$percent
pop_stats
cbind(pop_stats, gs_pop_get_stats(gs, type = pop.MFI)[, 3:8])
?pop.MFI
medians <- gs_pop_get_stats(gs, type = pop.MFI)[, 3:8]
medians
# Get population statistics -----------------------------------------------
pop_stats <- gs_pop_get_stats(gs, type = "count")
pop_stats$percent <- gs_pop_get_stats(gs, type = "percent")$percent
cbind(pop_stats, medians)
dim(pop_stats)
dim(medians)
pop_stats
gs_pop_get_stats(gs, type = pop.MFI)
gs_pop_get_stats(gs, type = pop.MFI)
gh_pop_get_stats(gs, type = pop.MFI)
gs_pop_get_stats(gs, type = pop.MFI)
gs_pop_get_stats(gs, type = pop.MFI)
pop.MFI
fun2 <- function (fr)
{
pd <- pData(parameters(fr))
pd <- data.table(pd)
#pd <- pd[!is.na(desc), ]
chnls <- pd[, name]
markers <- pd[, desc]
res <- colMedians(exprs(fr)[, chnls, drop = FALSE])
names(res) <- markers
res
}
gs_pop_get_stats(gs, type = fun2)
library(data.table)
gs_pop_get_stats(gs, type = fun2)
?colMedians
gs_pop_get_stats(gs, type = pop.MFI)
plot(gs)
plot(gs)
plot(gs)
gs_pop_get_stats(gs, nodes = NULL, type = pop.MFI)
pData(gs)
phenoData(gs)
pop.MFI
pData(parameters(g))
pData(parameters(gs))
parameters(gs[[1]])
parameters(trans_fs[[1]])
parameters(trans_fs)
pData(parameters(trans_fs[[1]]))
pData(parameters(trans_fs[[4]]))
pData(parameters(trans_fs[[3]]))
pData(parameters(fs[[4]]))
pData(parameters(fs[[1]]))
pData(parameters(fs[[1]]))$desc
desc <- pData(parameters(fs[[1]]))$desc
fs[[4]]
pData(fs[[4]])
pData(parameters(fs[[4]]))
pData(parameters(fs[[4]]))$desc <- desc
pData(parameters(fs[[4]]))$desc
fs[[4]]
write.FCS(fs[[4]], "data/raw/OpA_I2_C2_IM1_WB2_R1.fcs")
pData(parameters(fs[[5]]))
pData(parameters(fs[[4]]))
pData(parameters(fs[[3]]))
pData(parameters(fs[[2]]))
# Working with flowsets ---------------------------------------------------
files <- list.files("data/raw", pattern = ".fcs", full.names = TRUE)
fs <- read.flowSet(files[1:4])
fs
fsApply(fs, dim)
# Cleaning data -----------------------------------------------------------
cut_fs <- fsApply(fs, function(x) {
flow_cut_res <- flowCut(x)
flow_cut_res$frame
})
comp_matrix <- spillover(cut_fs[[1]])[[1]]
comp_fs <- compensate(cut_fs, comp_matrix)
# Transform the flowset ---------------------------------------------------
trans_fs <- transform(comp_fs, logicle_trans)
gs <- GatingSet(trans_fs) # gating set is the holding area for all the gates
# Scatter gate ------------------------------------------------------------
rect <- rectangleGate("FSC-A" = c(5e4, 1.2e5), "SSC-A" = c(0, 8e4), filterId = "Scatter")
rect
gs_pop_add(gs, rect, parent = "root")
gs_get_pop_paths(gs)
recompute(gs) # assign each event to the gating set
# Singlet gate ------------------------------------------------------------
scatter_fs <- gs_pop_get_data(gs, "Scatter")
autoplot(scatter_fs, x = "FSC-A", y = "FSC-H", bins = 200)
poly_coords <- matrix(c(4e4, 1.2e5, 1e5, 3e4, 2.5e4, 9e4, 1.2e5, 5e4), ncol = 2)
colnames(poly_coords) <- c("FSC-A", "FSC-H")
poly <- polygonGate(poly_coords, filterId = "Singlets")
gs_pop_add(gs, poly, parent = "Scatter")
gs_get_pop_paths(gs)
recompute(gs)
# Lymphocyte gate ---------------------------------------------------------
singlet_fs <- gs_pop_get_data(gs, "Singlets")
cov_mat <- matrix(c(0.5, 0, 0, 0.5), ncol = 2,
dimnames = list(c("APC-Cy7-A", "PE-Cy7-A"),
c("APC-Cy7-A", "PE-Cy7-A")))
cov_mat
means <- c("APC-Cy7-A" = 3.5, "PE-Cy7-A" = 3.8)
ellipse <- ellipsoidGate(cov_mat, mean = means, filterId = "CD3")
gs_pop_add(gs, ellipse, parent = "Singlets")
gs_get_pop_paths(gs)
recompute(gs)
# CD4 and CD8 gates -------------------------------------------------------
cd3_fs <- gs_pop_get_data(gs, "CD3")
## CD8
cd8_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x,
xChannel = "FITC-A",
yChannel = "PerCP-Cy5-5-A",
target = c(1, 3.5),
min = c(-1, 2.5),
quantile = 0.9)
})
gs_pop_add(gs, cd8_auto, parent = "CD3", name = "CD8")
recompute(gs)
autoplot(gs, x = "FITC-A", y = "PerCP-Cy5-5-A", gate = "CD8", bins = 200)
## CD4
cd4_auto <- fsApply(cd3_fs, function(x) {
gate_flowclust_2d(x, xChannel = "FITC-A", yChannel = "PerCP-Cy5-5-A",
target = c(2.8, 0.5),
max = c(4, 2),
K = 3,
quantile = 0.975)
})
gs_pop_add(gs, cd4_auto, parent = "CD3", name = "CD4")
recompute(gs)
# Get population statistics -----------------------------------------------
pop_stats <- gs_pop_get_stats(gs, type = "count")
pop_stats$percent <- gs_pop_get_stats(gs, type = "percent")$percent
gs_pop_get_stats(gs, nodes = NULL, type = pop.MFI)
medians <- gs_pop_get_stats(gs, type = pop.MFI)[, 3:8]
pop_stats <- cbind(pop_stats, medians)
pop_stats
write.csv(pop_stats, "Summary statistics.csv")
# Write out fcs files -----------------------------------------------------
getData(gs, "CD3")
# Write out fcs files -----------------------------------------------------
gs_pop_get_data(gs, "CD3")
?cytoset
?cytoframe
cd3_fs
# Write out fcs files -----------------------------------------------------
cd3_fs <- gs_pop_get_data(gs, "CD3")
write.flowSet(cd3_fs, "output")
